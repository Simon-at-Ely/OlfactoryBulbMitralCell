

// **************************************************
// File generated by: neuroConstruct v1.6.1 
// **************************************************

// This file holds the implementation in GENESIS of the Cell Mechanism:
// KA_ChannelML (Type: Channel mechanism, Model: ChannelML based process)

// with parameters: 
// /channelml/@units = Physiological Units 
// /channelml/notes = K-A current for Mitral Cells from Wang et al (1996) M.Migliore Jan. 2002     Note, the values used here are based on the Neuron Mod scripts accompanyi ... 
// /channelml/ion/@name = k 
// /channelml/ion/@charge = 1 
// /channelml/ion/@default_erev = -90 
// /channelml/channel_type/@name = KA_ChannelML 
// /channelml/channel_type/@density = yes 
// /channelml/channel_type/notes = A-type K channel, with rate equations expressed in tau and inf form 
// /channelml/channel_type/authorList/modelTranslator/name = Simon O'Connor 
// /channelml/channel_type/authorList/modelTranslator/institution = University of Cardiff 
// /channelml/channel_type/authorList/modelTranslator/email = simon.oconnor@btinternet.com 
// /channelml/channel_type/publication/fullTitle = Migliore, M., Hines, M.L., Shepherd, G.M. The Role of Distal Dendritic Gap Junctions in Synchronization of Mitral Cell Axonal Output J.Comput. Neurosc ... 
// /channelml/channel_type/publication/pubmedRef = http://www.ncbi.nlm.nih.gov/entrez/query.fcgi?cmd=Retrieve&amp;db=pubmed&amp;dopt=Abstract&amp;list_uids=15714267 
// /channelml/channel_type/neuronDBref/modelName = K channels 
// /channelml/channel_type/neuronDBref/uri = http://senselab.med.yale.edu/senselab/NeuronDB/channelGene2.htm#table3 
// /channelml/channel_type/current_voltage_relation/ohmic/@ion = k 
// /channelml/channel_type/current_voltage_relation/ohmic/conductance/@default_gmax = 2 
// /channelml/channel_type/current_voltage_relation/ohmic/conductance/rate_adjustments/q10_settings/@q10_factor = 3 
// /channelml/channel_type/current_voltage_relation/ohmic/conductance/rate_adjustments/q10_settings/@experimental_temp = 24 
// /channelml/channel_type/current_voltage_relation/ohmic/conductance/rate_adjustments/offset/@value = 0 
// /channelml/channel_type/current_voltage_relation/ohmic/conductance/gate[1]/@power = 1 
// /channelml/channel_type/current_voltage_relation/ohmic/conductance/gate[1]/state/@name = m 
// /channelml/channel_type/current_voltage_relation/ohmic/conductance/gate[1]/state/@fraction = 1 
// /channelml/channel_type/current_voltage_relation/ohmic/conductance/gate[2]/@power = 1 
// /channelml/channel_type/current_voltage_relation/ohmic/conductance/gate[2]/state/@name = h 
// /channelml/channel_type/current_voltage_relation/ohmic/conductance/gate[2]/state/@fraction = 1 
// /channelml/channel_type/hh_gate[1]/@state = m 
// /channelml/channel_type/hh_gate[1]/transition/voltage_gate/alpha/parameterised_hh/@type = exponential 
// /channelml/channel_type/hh_gate[1]/transition/voltage_gate/alpha/parameterised_hh/@expr = A*exp(k*(v-d)) 
// /channelml/channel_type/hh_gate[1]/transition/voltage_gate/alpha/parameterised_hh/parameter[1]/@name = A 
// /channelml/channel_type/hh_gate[1]/transition/voltage_gate/alpha/parameterised_hh/parameter[1]/@value = 1 
// /channelml/channel_type/hh_gate[1]/transition/voltage_gate/alpha/parameterised_hh/parameter[2]/@name = k 
// /channelml/channel_type/hh_gate[1]/transition/voltage_gate/alpha/parameterised_hh/parameter[2]/@value = 0.1 
// /channelml/channel_type/hh_gate[1]/transition/voltage_gate/alpha/parameterised_hh/parameter[3]/@name = d 
// /channelml/channel_type/hh_gate[1]/transition/voltage_gate/alpha/parameterised_hh/parameter[3]/@value = -45 
// /channelml/channel_type/hh_gate[1]/transition/voltage_gate/beta/parameterised_hh/@type = exponential 
// /channelml/channel_type/hh_gate[1]/transition/voltage_gate/beta/parameterised_hh/@expr = A*exp(k*(v-d)) 
// /channelml/channel_type/hh_gate[1]/transition/voltage_gate/beta/parameterised_hh/parameter[1]/@name = A 
// /channelml/channel_type/hh_gate[1]/transition/voltage_gate/beta/parameterised_hh/parameter[1]/@value = 1 
// /channelml/channel_type/hh_gate[1]/transition/voltage_gate/beta/parameterised_hh/parameter[2]/@name = k 
// /channelml/channel_type/hh_gate[1]/transition/voltage_gate/beta/parameterised_hh/parameter[2]/@value = 0.075 
// /channelml/channel_type/hh_gate[1]/transition/voltage_gate/beta/parameterised_hh/parameter[3]/@name = d 
// /channelml/channel_type/hh_gate[1]/transition/voltage_gate/beta/parameterised_hh/parameter[3]/@value = -45 
// /channelml/channel_type/hh_gate[1]/transition/voltage_gate/tau/generic_equation_hh/@expr = beta / (0.04 *(1+alpha)) 
// /channelml/channel_type/hh_gate[1]/transition/voltage_gate/inf/parameterised_hh/@type = sigmoid 
// /channelml/channel_type/hh_gate[1]/transition/voltage_gate/inf/parameterised_hh/@expr = A/(1 + exp(k*(v-d))) 
// /channelml/channel_type/hh_gate[1]/transition/voltage_gate/inf/parameterised_hh/parameter[1]/@name = A 
// /channelml/channel_type/hh_gate[1]/transition/voltage_gate/inf/parameterised_hh/parameter[1]/@value = 1 
// /channelml/channel_type/hh_gate[1]/transition/voltage_gate/inf/parameterised_hh/parameter[2]/@name = k 
// /channelml/channel_type/hh_gate[1]/transition/voltage_gate/inf/parameterised_hh/parameter[2]/@value = -0.071428571 
// /channelml/channel_type/hh_gate[1]/transition/voltage_gate/inf/parameterised_hh/parameter[3]/@name = d 
// /channelml/channel_type/hh_gate[1]/transition/voltage_gate/inf/parameterised_hh/parameter[3]/@value = 17.5 
// /channelml/channel_type/hh_gate[2]/@state = h 
// /channelml/channel_type/hh_gate[2]/transition/voltage_gate/alpha/parameterised_hh/@type = exponential 
// /channelml/channel_type/hh_gate[2]/transition/voltage_gate/alpha/parameterised_hh/@expr = A*exp(k*(v-d)) 
// /channelml/channel_type/hh_gate[2]/transition/voltage_gate/alpha/parameterised_hh/parameter[1]/@name = A 
// /channelml/channel_type/hh_gate[2]/transition/voltage_gate/alpha/parameterised_hh/parameter[1]/@value = 1 
// /channelml/channel_type/hh_gate[2]/transition/voltage_gate/alpha/parameterised_hh/parameter[2]/@name = k 
// /channelml/channel_type/hh_gate[2]/transition/voltage_gate/alpha/parameterised_hh/parameter[2]/@value = 0.2 
// /channelml/channel_type/hh_gate[2]/transition/voltage_gate/alpha/parameterised_hh/parameter[3]/@name = d 
// /channelml/channel_type/hh_gate[2]/transition/voltage_gate/alpha/parameterised_hh/parameter[3]/@value = -70 
// /channelml/channel_type/hh_gate[2]/transition/voltage_gate/beta/parameterised_hh/@type = exponential 
// /channelml/channel_type/hh_gate[2]/transition/voltage_gate/beta/parameterised_hh/@expr = A*exp(k*(v-d)) 
// /channelml/channel_type/hh_gate[2]/transition/voltage_gate/beta/parameterised_hh/parameter[1]/@name = A 
// /channelml/channel_type/hh_gate[2]/transition/voltage_gate/beta/parameterised_hh/parameter[1]/@value = 1 
// /channelml/channel_type/hh_gate[2]/transition/voltage_gate/beta/parameterised_hh/parameter[2]/@name = k 
// /channelml/channel_type/hh_gate[2]/transition/voltage_gate/beta/parameterised_hh/parameter[2]/@value = 0.198 
// /channelml/channel_type/hh_gate[2]/transition/voltage_gate/beta/parameterised_hh/parameter[3]/@name = d 
// /channelml/channel_type/hh_gate[2]/transition/voltage_gate/beta/parameterised_hh/parameter[3]/@value = -70 
// /channelml/channel_type/hh_gate[2]/transition/voltage_gate/tau/generic_equation_hh/@expr = beta / (0.018 *(1+alpha)) 
// /channelml/channel_type/hh_gate[2]/transition/voltage_gate/inf/parameterised_hh/@type = sigmoid 
// /channelml/channel_type/hh_gate[2]/transition/voltage_gate/inf/parameterised_hh/@expr = A/(1 + exp(k*(v-d))) 
// /channelml/channel_type/hh_gate[2]/transition/voltage_gate/inf/parameterised_hh/parameter[1]/@name = A 
// /channelml/channel_type/hh_gate[2]/transition/voltage_gate/inf/parameterised_hh/parameter[1]/@value = 1 
// /channelml/channel_type/hh_gate[2]/transition/voltage_gate/inf/parameterised_hh/parameter[2]/@name = k 
// /channelml/channel_type/hh_gate[2]/transition/voltage_gate/inf/parameterised_hh/parameter[2]/@value = 0.166666666 
// /channelml/channel_type/hh_gate[2]/transition/voltage_gate/inf/parameterised_hh/parameter[3]/@name = d 
// /channelml/channel_type/hh_gate[2]/transition/voltage_gate/inf/parameterised_hh/parameter[3]/@value = -41.7 

// File from which this was generated: /home/Simon/nC_projects/Rat_Mitral_Cell_Gap_Network_copy4_copy2_Genesis_single_cell_no_calcium/cellMechanisms/KA_ChannelML/KA_Chan.xml

// XSL file with mapping to simulator: /home/Simon/nC_projects/Rat_Mitral_Cell_Gap_Network_copy4_copy2_Genesis_single_cell_no_calcium/cellMechanisms/KA_ChannelML/ChannelML_v1.8.0_GENESIStab.xsl



// This is a GENESIS script file generated from a ChannelML v1.8.0 file
// The ChannelML file is mapped onto a tabchannel object


// Units of ChannelML file: Physiological Units, units of GENESIS file generated: SI Units

/*
    K-A current for Mitral Cells from Wang et al (1996) M.Migliore Jan. 2002
    Note, the values used here are based on the Neuron Mod scripts accompanying Migliore et al (2005)
*/

function make_KA_ChannelML

        /*
            A-type K channel, with rate equations expressed in tau and inf form

            
Reference: Migliore, M., Hines, M.L., Shepherd, G.M. The Role of Distal Dendritic Gap Junctions in Synchronization of Mitral Cell Axonal Output J.Comput. Neurosci. 18, 151-161, 2005
            Pubmed: http://www.ncbi.nlm.nih.gov/entrez/query.fcgi?cmd=Retrieve&db=pubmed&dopt=Abstract&list_uids=15714267

        */
        

        str chanpath = "/library/KA_ChannelML"

        if ({exists {chanpath}})
            return
        end
        
        create tabchannel {chanpath}
            

        setfield {chanpath} \ 
            Ek              -0.090 \
            Ik              0  \
            Xpower          1 \
            Ypower          1
        
        setfield {chanpath} \
            Gbar 20 \
            Gk              0 

        
        // There is a Q10 factor which will alter the tau of the gates
                             

        float temp_adj_m = {pow 3 {(celsius - 24)/10}}                 

        float temp_adj_h = {pow 3 {(celsius - 24)/10}}

        float tab_divs = 400

        float v_min = -0.1

        float v_max = 0.1

        float v, dv, i
        

        // Creating table for gate m, using name X for it here

        float dv = ({v_max} - {v_min})/{tab_divs}

        
        call {chanpath} TABCREATE X {tab_divs} {v_min} {v_max}
                

        v = {v_min}

                  

        // There is a voltage offset of 0. This will shift the dependency of the rate equations
        v = v - 0
            

        for (i = 0; i <= ({tab_divs}); i = i + 1)
        
            // Looking at rate: alpha
                

            float alpha
                
            float A, B, k, V0
                             

            // ChannelML form of equation: alpha = A*exp(k*(v-d)), with params:
            // A = 1, k = 0.1, d = -45, in units: Physiological Units
            A = 1000
            k = 100
            B = 1/k
            V0 = -0.045
            alpha = A * {exp {(v - V0) / B}}
        
            // Looking at rate: beta
                

            float beta
                
            float A, B, k, V0
                             

            // ChannelML form of equation: beta = A*exp(k*(v-d)), with params:
            // A = 1, k = 0.075, d = -45, in units: Physiological Units
            A = 1000
            k = 75
            B = 1/k
            V0 = -0.045
            beta = A * {exp {(v - V0) / B}}
        
            // Looking at rate: tau
                

            float tau
                     

            // Found a generic form of rate equation for tau, using expression: beta / (0.04 *(1+alpha))
            // Will translate this for GENESIS compatibility...
                    
            // Equation (and all ChannelML file values) in Physiological Units but this script in SI Units
            

            v = v * 1000 // temporarily set v to units of equation...
            
            // Equation depends on alpha/beta, so converting them too...
            alpha = alpha * 0.001
            beta = beta * 0.001
            tau = beta / {0.04 *{1+alpha}}
            
            v = v * 0.001 // reset v
            
            alpha = alpha * 1000  // resetting alpha
            beta = beta * 1000  // resetting beta
                        
            // Set correct units of tau
            tau = tau * 0.001
            // Looking at rate: inf
                

            float inf
                
            float A, B, k, V0
                             

            // ChannelML form of equation: inf = A/(1 + exp(k*(v-d))), with params:
            // A = 1, k = -0.071428571, d = 17.5, in units: Physiological Units
            A = 1
            k = -71.42857099999999
            B = 1/k
            V0 = 0.0175
            inf = A / ( {exp {(v - V0) / B}} + 1)
        

            // Evaluating the tau and inf expressions

                    
            tau = tau/temp_adj_m
    

            
            // Working out the "real" alpha and beta expressions from the tau and inf
            
            alpha = inf / tau   
            beta = (1- inf)/tau
            
            
            setfield {chanpath} X_A->table[{i}] {alpha}
            setfield {chanpath} X_B->table[{i}] {alpha + beta}

                

            v = v + dv

        end // end of for (i = 0; i <= ({tab_divs}); i = i + 1)

        

          


        setfield {chanpath} X_A->calc_mode 1 X_B->calc_mode 1


        

        // Creating table for gate h, using name Y for it here

        float dv = ({v_max} - {v_min})/{tab_divs}

        
        call {chanpath} TABCREATE Y {tab_divs} {v_min} {v_max}
                

        v = {v_min}

                  

        // There is a voltage offset of 0. This will shift the dependency of the rate equations
        v = v - 0
            

        for (i = 0; i <= ({tab_divs}); i = i + 1)
        
            // Looking at rate: alpha
                

            float alpha
                
            float A, B, k, V0
                             

            // ChannelML form of equation: alpha = A*exp(k*(v-d)), with params:
            // A = 1, k = 0.2, d = -70, in units: Physiological Units
            A = 1000
            k = 200
            B = 1/k
            V0 = -0.07
            alpha = A * {exp {(v - V0) / B}}
        
            // Looking at rate: beta
                

            float beta
                
            float A, B, k, V0
                             

            // ChannelML form of equation: beta = A*exp(k*(v-d)), with params:
            // A = 1, k = 0.198, d = -70, in units: Physiological Units
            A = 1000
            k = 198
            B = 1/k
            V0 = -0.07
            beta = A * {exp {(v - V0) / B}}
        
            // Looking at rate: tau
                

            float tau
                     

            // Found a generic form of rate equation for tau, using expression: beta / (0.018 *(1+alpha))
            // Will translate this for GENESIS compatibility...
                    
            // Equation (and all ChannelML file values) in Physiological Units but this script in SI Units
            

            v = v * 1000 // temporarily set v to units of equation...
            
            // Equation depends on alpha/beta, so converting them too...
            alpha = alpha * 0.001
            beta = beta * 0.001
            tau = beta / {0.018 *{1+alpha}}
            
            v = v * 0.001 // reset v
            
            alpha = alpha * 1000  // resetting alpha
            beta = beta * 1000  // resetting beta
                        
            // Set correct units of tau
            tau = tau * 0.001
            // Looking at rate: inf
                

            float inf
                
            float A, B, k, V0
                             

            // ChannelML form of equation: inf = A/(1 + exp(k*(v-d))), with params:
            // A = 1, k = 0.166666666, d = -41.7, in units: Physiological Units
            A = 1
            k = 166.666666
            B = 1/k
            V0 = -0.0417
            inf = A / ( {exp {(v - V0) / B}} + 1)
        

            // Evaluating the tau and inf expressions

                    
            tau = tau/temp_adj_h
    

            
            // Working out the "real" alpha and beta expressions from the tau and inf
            
            alpha = inf / tau   
            beta = (1- inf)/tau
            
            
            setfield {chanpath} Y_A->table[{i}] {alpha}
            setfield {chanpath} Y_B->table[{i}] {alpha + beta}

                

            v = v + dv

        end // end of for (i = 0; i <= ({tab_divs}); i = i + 1)

        

          


        setfield {chanpath} Y_A->calc_mode 1 Y_B->calc_mode 1


        


end

