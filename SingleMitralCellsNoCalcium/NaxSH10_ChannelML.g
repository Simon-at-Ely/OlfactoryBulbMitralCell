

// **************************************************
// File generated by: neuroConstruct v1.6.1 
// **************************************************

// This file holds the implementation in GENESIS of the Cell Mechanism:
// NaxSH10_ChannelML (Type: Channel mechanism, Model: ChannelML based process)

// with parameters: 
// /channelml/@units = Physiological Units 
// /channelml/notes = ChannelML file containing a single Channel description 
// /channelml/ion/@name = na 
// /channelml/ion/@charge = 1 
// /channelml/ion/@default_erev = 50 
// /channelml/channel_type/@name = NaxSH10_ChannelML 
// /channelml/channel_type/@density = yes 
// /channelml/channel_type/status/@value = stable 
// /channelml/channel_type/status/comment = Agreement of generated NEURON and GENESIS to original NEURON mod. Compared voltage and n traces on single comp with current pulse 
// /channelml/channel_type/status/contributor/name = Padraig Gleeson 
// /channelml/channel_type/notes = ... 
// /channelml/channel_type/authorList/modelTranslator/name = Padraig Gleeson 
// /channelml/channel_type/authorList/modelTranslator/institution = UCL 
// /channelml/channel_type/authorList/modelTranslator/email = p.gleeson - at - ucl.ac.uk 
// /channelml/channel_type/current_voltage_relation/ohmic/@ion = na 
// /channelml/channel_type/current_voltage_relation/ohmic/conductance/@default_gmax = 120 
// /channelml/channel_type/current_voltage_relation/ohmic/conductance/rate_adjustments/q10_settings/@q10_factor = 2 
// /channelml/channel_type/current_voltage_relation/ohmic/conductance/rate_adjustments/q10_settings/@experimental_temp = 24 
// /channelml/channel_type/current_voltage_relation/ohmic/conductance/gate[1]/@power = 3 
// /channelml/channel_type/current_voltage_relation/ohmic/conductance/gate[1]/state/@name = m 
// /channelml/channel_type/current_voltage_relation/ohmic/conductance/gate[1]/state/@fraction = 1 
// /channelml/channel_type/current_voltage_relation/ohmic/conductance/gate[2]/@power = 1 
// /channelml/channel_type/current_voltage_relation/ohmic/conductance/gate[2]/state/@name = h 
// /channelml/channel_type/current_voltage_relation/ohmic/conductance/gate[2]/state/@fraction = 1 
// /channelml/channel_type/hh_gate[1]/@state = m 
// /channelml/channel_type/hh_gate[1]/transition/voltage_gate/alpha/parameterised_hh/@type = linoid 
// /channelml/channel_type/hh_gate[1]/transition/voltage_gate/alpha/parameterised_hh/@expr = A*(k*(v-d))/(1 - exp(-(k*(v-d)))) 
// /channelml/channel_type/hh_gate[1]/transition/voltage_gate/alpha/parameterised_hh/parameter[1]/@name = A 
// /channelml/channel_type/hh_gate[1]/transition/voltage_gate/alpha/parameterised_hh/parameter[1]/@value = 2.880000018 
// /channelml/channel_type/hh_gate[1]/transition/voltage_gate/alpha/parameterised_hh/parameter[2]/@name = k 
// /channelml/channel_type/hh_gate[1]/transition/voltage_gate/alpha/parameterised_hh/parameter[2]/@value = 0.1388888888 
// /channelml/channel_type/hh_gate[1]/transition/voltage_gate/alpha/parameterised_hh/parameter[3]/@name = d 
// /channelml/channel_type/hh_gate[1]/transition/voltage_gate/alpha/parameterised_hh/parameter[3]/@value = -20 
// /channelml/channel_type/hh_gate[1]/transition/voltage_gate/beta/parameterised_hh/@type = linoid 
// /channelml/channel_type/hh_gate[1]/transition/voltage_gate/beta/parameterised_hh/@expr = A*(k*(v-d))/(1 - exp(-(k*(v-d)))) 
// /channelml/channel_type/hh_gate[1]/transition/voltage_gate/beta/parameterised_hh/parameter[1]/@name = A 
// /channelml/channel_type/hh_gate[1]/transition/voltage_gate/beta/parameterised_hh/parameter[1]/@value = 0.892800005 
// /channelml/channel_type/hh_gate[1]/transition/voltage_gate/beta/parameterised_hh/parameter[2]/@name = k 
// /channelml/channel_type/hh_gate[1]/transition/voltage_gate/beta/parameterised_hh/parameter[2]/@value = -0.1388888888 
// /channelml/channel_type/hh_gate[1]/transition/voltage_gate/beta/parameterised_hh/parameter[3]/@name = d 
// /channelml/channel_type/hh_gate[1]/transition/voltage_gate/beta/parameterised_hh/parameter[3]/@value = -20 
// /channelml/channel_type/hh_gate[1]/transition/voltage_gate/tau/generic_equation_hh/@expr = 1/( (alpha + beta) * temp_adj_m ) &lt; 0.02 ? (0.02 * temp_adj_m) : 1/(alpha + beta)   
// /channelml/channel_type/hh_gate[2]/@state = h 
// /channelml/channel_type/hh_gate[2]/transition/voltage_gate/alpha/parameterised_hh/@type = linoid 
// /channelml/channel_type/hh_gate[2]/transition/voltage_gate/alpha/parameterised_hh/@expr = A*(k*(v-d))/(1 - exp(-(k*(v-d)))) 
// /channelml/channel_type/hh_gate[2]/transition/voltage_gate/alpha/parameterised_hh/parameter[1]/@name = A 
// /channelml/channel_type/hh_gate[2]/transition/voltage_gate/alpha/parameterised_hh/parameter[1]/@value = 0.045 
// /channelml/channel_type/hh_gate[2]/transition/voltage_gate/alpha/parameterised_hh/parameter[2]/@name = k 
// /channelml/channel_type/hh_gate[2]/transition/voltage_gate/alpha/parameterised_hh/parameter[2]/@value = 0.6666666667 
// /channelml/channel_type/hh_gate[2]/transition/voltage_gate/alpha/parameterised_hh/parameter[3]/@name = d 
// /channelml/channel_type/hh_gate[2]/transition/voltage_gate/alpha/parameterised_hh/parameter[3]/@value = -35 
// /channelml/channel_type/hh_gate[2]/transition/voltage_gate/beta/parameterised_hh/@type = linoid 
// /channelml/channel_type/hh_gate[2]/transition/voltage_gate/beta/parameterised_hh/@expr = A*(k*(v-d))/(1 - exp(-(k*(v-d)))) 
// /channelml/channel_type/hh_gate[2]/transition/voltage_gate/beta/parameterised_hh/parameter[1]/@name = A 
// /channelml/channel_type/hh_gate[2]/transition/voltage_gate/beta/parameterised_hh/parameter[1]/@value = 0.015 
// /channelml/channel_type/hh_gate[2]/transition/voltage_gate/beta/parameterised_hh/parameter[2]/@name = k 
// /channelml/channel_type/hh_gate[2]/transition/voltage_gate/beta/parameterised_hh/parameter[2]/@value = -0.6666666667 
// /channelml/channel_type/hh_gate[2]/transition/voltage_gate/beta/parameterised_hh/parameter[3]/@name = d 
// /channelml/channel_type/hh_gate[2]/transition/voltage_gate/beta/parameterised_hh/parameter[3]/@value = -35 
// /channelml/channel_type/hh_gate[2]/transition/voltage_gate/tau/generic_equation_hh/@expr = 1/( (alpha + beta) * temp_adj_h ) &lt; 0.5 ? (0.5 * temp_adj_h) : 1/(alpha + beta)   
// /channelml/channel_type/hh_gate[2]/transition/voltage_gate/inf/parameterised_hh/@type = sigmoid 
// /channelml/channel_type/hh_gate[2]/transition/voltage_gate/inf/parameterised_hh/@expr = A/(1 + exp(k*(v-d))) 
// /channelml/channel_type/hh_gate[2]/transition/voltage_gate/inf/parameterised_hh/parameter[1]/@name = A 
// /channelml/channel_type/hh_gate[2]/transition/voltage_gate/inf/parameterised_hh/parameter[1]/@value = 1 
// /channelml/channel_type/hh_gate[2]/transition/voltage_gate/inf/parameterised_hh/parameter[2]/@name = k 
// /channelml/channel_type/hh_gate[2]/transition/voltage_gate/inf/parameterised_hh/parameter[2]/@value = 0.25 
// /channelml/channel_type/hh_gate[2]/transition/voltage_gate/inf/parameterised_hh/parameter[3]/@name = d 
// /channelml/channel_type/hh_gate[2]/transition/voltage_gate/inf/parameterised_hh/parameter[3]/@value = -40 
// /channelml/channel_type/impl_prefs/table_settings/@max_v = 100 
// /channelml/channel_type/impl_prefs/table_settings/@min_v = -100 
// /channelml/channel_type/impl_prefs/table_settings/@table_divisions = 2000 

// File from which this was generated: /home/Simon/nC_projects/Rat_Mitral_Cell_Gap_Network_copy4_copy2_Genesis_single_cell_no_calcium/cellMechanisms/NaxSH10_ChannelML/NaChannel.xml

// XSL file with mapping to simulator: /home/Simon/nC_projects/Rat_Mitral_Cell_Gap_Network_copy4_copy2_Genesis_single_cell_no_calcium/cellMechanisms/NaxSH10_ChannelML/ChannelML_v1.8.0_GENESIStab.xsl



// This is a GENESIS script file generated from a ChannelML v1.8.0 file
// The ChannelML file is mapped onto a tabchannel object


// Units of ChannelML file: Physiological Units, units of GENESIS file generated: SI Units

/*
    ChannelML file containing a single Channel description
*/

function make_NaxSH10_ChannelML

        /*
            ...

        */
        

        str chanpath = "/library/NaxSH10_ChannelML"

        if ({exists {chanpath}})
            return
        end
        
        create tabchannel {chanpath}
            

        setfield {chanpath} \ 
            Ek              0.05 \
            Ik              0  \
            Xpower          3 \
            Ypower          1
        
        setfield {chanpath} \
            Gbar 1200 \
            Gk              0 

        
        // There is a Q10 factor which will alter the tau of the gates
                             

        float temp_adj_m = {pow 2 {(celsius - 24)/10}}                 

        float temp_adj_h = {pow 2 {(celsius - 24)/10}}

        float tab_divs = 2000

        float v_min = -0.1

        float v_max = 0.1

        float v, dv, i
        

        // Creating table for gate m, using name X for it here

        float dv = ({v_max} - {v_min})/{tab_divs}

        
        call {chanpath} TABCREATE X {tab_divs} {v_min} {v_max}
                

        v = {v_min}

            

        for (i = 0; i <= ({tab_divs}); i = i + 1)
        
            // Looking at rate: alpha
                

            float alpha
                
            float A, B, k, V0
                             

            // ChannelML form of equation: alpha = A*(k*(v-d))/(1 - exp(-(k*(v-d)))), with params:
            // A = 2.880000018, k = 0.1388888888, d = -20, in units: Physiological Units
            A = 2880.000018
            k = 138.8888888
            B = 1/k
            V0 = -0.02
            

            if ( {abs {(v - V0)/ B}} < 1e-6)
                alpha = A * (1 + (v - V0)/B/2)
            else
                alpha = A * ((v - V0) / B) /(1 - {exp {-1 * (v - V0)/B}})
            end

        
            // Looking at rate: beta
                

            float beta
                
            float A, B, k, V0
                             

            // ChannelML form of equation: beta = A*(k*(v-d))/(1 - exp(-(k*(v-d)))), with params:
            // A = 0.892800005, k = -0.1388888888, d = -20, in units: Physiological Units
            A = 892.800005
            k = -138.8888888
            B = 1/k
            V0 = -0.02
            

            if ( {abs {(v - V0)/ B}} < 1e-6)
                beta = A * (1 + (v - V0)/B/2)
            else
                beta = A * ((v - V0) / B) /(1 - {exp {-1 * (v - V0)/B}})
            end

        
            // Looking at rate: tau
                

            float tau
                     

            // Found a generic form of rate equation for tau, using expression: 1/( (alpha + beta) * temp_adj_m ) < 0.02 ? (0.02 * temp_adj_m) : 1/(alpha + beta)  
            // Will translate this for GENESIS compatibility...
                    
            // Equation (and all ChannelML file values) in Physiological Units but this script in SI Units
            

            v = v * 1000 // temporarily set v to units of equation...
            
            // Equation depends on alpha/beta, so converting them too...
            alpha = alpha * 0.001
            beta = beta * 0.001
            

            if (1/{ {alpha + beta} * temp_adj_m } < 0.02 )
                tau =  {0.02 * temp_adj_m} 
            else
                tau =  1/{alpha + beta}  
            end
        
            
            v = v * 0.001 // reset v
            
            alpha = alpha * 1000  // resetting alpha
            beta = beta * 1000  // resetting beta
                        
            // Set correct units of tau
            tau = tau * 0.001

            // Evaluating the tau and inf expressions

                    
            tau = tau/temp_adj_m
            float inf = alpha/(alpha + beta)
                    
    

            
            // Working out the "real" alpha and beta expressions from the tau and inf
            
            alpha = inf / tau   
            beta = (1- inf)/tau
            
            
            setfield {chanpath} X_A->table[{i}] {alpha}
            setfield {chanpath} X_B->table[{i}] {alpha + beta}

                

            v = v + dv

        end // end of for (i = 0; i <= ({tab_divs}); i = i + 1)

        

          


        setfield {chanpath} X_A->calc_mode 1 X_B->calc_mode 1


        

        // Creating table for gate h, using name Y for it here

        float dv = ({v_max} - {v_min})/{tab_divs}

        
        call {chanpath} TABCREATE Y {tab_divs} {v_min} {v_max}
                

        v = {v_min}

            

        for (i = 0; i <= ({tab_divs}); i = i + 1)
        
            // Looking at rate: alpha
                

            float alpha
                
            float A, B, k, V0
                             

            // ChannelML form of equation: alpha = A*(k*(v-d))/(1 - exp(-(k*(v-d)))), with params:
            // A = 0.045, k = 0.6666666667, d = -35, in units: Physiological Units
            A = 45
            k = 666.6666667
            B = 1/k
            V0 = -0.035
            

            if ( {abs {(v - V0)/ B}} < 1e-6)
                alpha = A * (1 + (v - V0)/B/2)
            else
                alpha = A * ((v - V0) / B) /(1 - {exp {-1 * (v - V0)/B}})
            end

        
            // Looking at rate: beta
                

            float beta
                
            float A, B, k, V0
                             

            // ChannelML form of equation: beta = A*(k*(v-d))/(1 - exp(-(k*(v-d)))), with params:
            // A = 0.015, k = -0.6666666667, d = -35, in units: Physiological Units
            A = 15
            k = -666.6666667
            B = 1/k
            V0 = -0.035
            

            if ( {abs {(v - V0)/ B}} < 1e-6)
                beta = A * (1 + (v - V0)/B/2)
            else
                beta = A * ((v - V0) / B) /(1 - {exp {-1 * (v - V0)/B}})
            end

        
            // Looking at rate: tau
                

            float tau
                     

            // Found a generic form of rate equation for tau, using expression: 1/( (alpha + beta) * temp_adj_h ) < 0.5 ? (0.5 * temp_adj_h) : 1/(alpha + beta)  
            // Will translate this for GENESIS compatibility...
                    
            // Equation (and all ChannelML file values) in Physiological Units but this script in SI Units
            

            v = v * 1000 // temporarily set v to units of equation...
            
            // Equation depends on alpha/beta, so converting them too...
            alpha = alpha * 0.001
            beta = beta * 0.001
            

            if (1/{ {alpha + beta} * temp_adj_h } < 0.5 )
                tau =  {0.5 * temp_adj_h} 
            else
                tau =  1/{alpha + beta}  
            end
        
            
            v = v * 0.001 // reset v
            
            alpha = alpha * 1000  // resetting alpha
            beta = beta * 1000  // resetting beta
                        
            // Set correct units of tau
            tau = tau * 0.001
            // Looking at rate: inf
                

            float inf
                
            float A, B, k, V0
                             

            // ChannelML form of equation: inf = A/(1 + exp(k*(v-d))), with params:
            // A = 1, k = 0.25, d = -40, in units: Physiological Units
            A = 1
            k = 250
            B = 1/k
            V0 = -0.04
            inf = A / ( {exp {(v - V0) / B}} + 1)
        

            // Evaluating the tau and inf expressions

                    
            tau = tau/temp_adj_h
    

            
            // Working out the "real" alpha and beta expressions from the tau and inf
            
            alpha = inf / tau   
            beta = (1- inf)/tau
            
            
            setfield {chanpath} Y_A->table[{i}] {alpha}
            setfield {chanpath} Y_B->table[{i}] {alpha + beta}

                

            v = v + dv

        end // end of for (i = 0; i <= ({tab_divs}); i = i + 1)

        

          


        setfield {chanpath} Y_A->calc_mode 1 Y_B->calc_mode 1


        


end

