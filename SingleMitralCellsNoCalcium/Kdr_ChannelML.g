

// **************************************************
// File generated by: neuroConstruct v1.6.1 
// **************************************************

// This file holds the implementation in GENESIS of the Cell Mechanism:
// Kdr_ChannelML (Type: Channel mechanism, Model: Template based ChannelML file)

// with parameters: 
// /channelml/@units = Physiological Units 
// /channelml/notes = ChannelML file containing a single Channel description 
// /channelml/ion/@name = k 
// /channelml/ion/@default_erev = -90.0 
// /channelml/ion/@charge = 1 
// /channelml/channel_type/@name = Kdr_ChannelML 
// /channelml/channel_type/@density = yes 
// /channelml/channel_type/status/@value = in_progress 
// /channelml/channel_type/status/comment = Equations adapted from paper for modern convention of external potential being zero 
// /channelml/channel_type/status/contributor/name = Padraig Gleeson 
// /channelml/channel_type/notes = Mitral cell K DR channel 
// /channelml/channel_type/neuronDBref/modelName = K channels 
// /channelml/channel_type/neuronDBref/uri = http://senselab.med.yale.edu/senselab/NeuronDB/channelGene2.htm#table3 
// /channelml/channel_type/current_voltage_relation/ohmic/@ion = k 
// /channelml/channel_type/current_voltage_relation/ohmic/conductance/@default_gmax = 36 
// /channelml/channel_type/current_voltage_relation/ohmic/conductance/rate_adjustments/q10_settings/@q10_factor = 3 
// /channelml/channel_type/current_voltage_relation/ohmic/conductance/rate_adjustments/q10_settings/@experimental_temp = 24 
// /channelml/channel_type/current_voltage_relation/ohmic/conductance/gate/@power = 1 
// /channelml/channel_type/current_voltage_relation/ohmic/conductance/gate/state/@name = m 
// /channelml/channel_type/current_voltage_relation/ohmic/conductance/gate/state/@fraction = 1 
// /channelml/channel_type/hh_gate/@state = m 
// /channelml/channel_type/hh_gate/transition/voltage_gate/alpha/parameterised_hh/@type = exponential 
// /channelml/channel_type/hh_gate/transition/voltage_gate/alpha/parameterised_hh/@expr = A*exp(k*(v-d)) 
// /channelml/channel_type/hh_gate/transition/voltage_gate/alpha/parameterised_hh/parameter[1]/@name = A 
// /channelml/channel_type/hh_gate/transition/voltage_gate/alpha/parameterised_hh/parameter[1]/@value = 1 
// /channelml/channel_type/hh_gate/transition/voltage_gate/alpha/parameterised_hh/parameter[2]/@name = k 
// /channelml/channel_type/hh_gate/transition/voltage_gate/alpha/parameterised_hh/parameter[2]/@value = 0.055 
// /channelml/channel_type/hh_gate/transition/voltage_gate/alpha/parameterised_hh/parameter[3]/@name = d 
// /channelml/channel_type/hh_gate/transition/voltage_gate/alpha/parameterised_hh/parameter[3]/@value = -50 
// /channelml/channel_type/hh_gate/transition/voltage_gate/beta/parameterised_hh/@type = exponential 
// /channelml/channel_type/hh_gate/transition/voltage_gate/beta/parameterised_hh/@expr = A*exp(k*(v-d)) 
// /channelml/channel_type/hh_gate/transition/voltage_gate/beta/parameterised_hh/parameter[1]/@name = A 
// /channelml/channel_type/hh_gate/transition/voltage_gate/beta/parameterised_hh/parameter[1]/@value = 1 
// /channelml/channel_type/hh_gate/transition/voltage_gate/beta/parameterised_hh/parameter[2]/@name = k 
// /channelml/channel_type/hh_gate/transition/voltage_gate/beta/parameterised_hh/parameter[2]/@value = 0.0275 
// /channelml/channel_type/hh_gate/transition/voltage_gate/beta/parameterised_hh/parameter[3]/@name = d 
// /channelml/channel_type/hh_gate/transition/voltage_gate/beta/parameterised_hh/parameter[3]/@value = -50 
// /channelml/channel_type/hh_gate/transition/voltage_gate/tau/generic_equation_hh/@expr = beta/(0.0035 *( 1 +alpha)) 
// /channelml/channel_type/hh_gate/transition/voltage_gate/inf/parameterised_hh/@type = sigmoid 
// /channelml/channel_type/hh_gate/transition/voltage_gate/inf/parameterised_hh/@expr = A/(1 + exp(k*(v-d))) 
// /channelml/channel_type/hh_gate/transition/voltage_gate/inf/parameterised_hh/parameter[1]/@name = A 
// /channelml/channel_type/hh_gate/transition/voltage_gate/inf/parameterised_hh/parameter[1]/@value = 1 
// /channelml/channel_type/hh_gate/transition/voltage_gate/inf/parameterised_hh/parameter[2]/@name = k 
// /channelml/channel_type/hh_gate/transition/voltage_gate/inf/parameterised_hh/parameter[2]/@value = -0.1 
// /channelml/channel_type/hh_gate/transition/voltage_gate/inf/parameterised_hh/parameter[3]/@name = d 
// /channelml/channel_type/hh_gate/transition/voltage_gate/inf/parameterised_hh/parameter[3]/@value = 21 
// /channelml/channel_type/impl_prefs/table_settings/@max_v = 100 
// /channelml/channel_type/impl_prefs/table_settings/@min_v = -100 
// /channelml/channel_type/impl_prefs/table_settings/@table_divisions = 400 

// File from which this was generated: /home/Simon/nC_projects/Rat_Mitral_Cell_Gap_Network_copy4_copy2_Genesis_single_cell_no_calcium/cellMechanisms/Kdr_ChannelML/KChannel.xml

// XSL file with mapping to simulator: /home/Simon/nC_projects/Rat_Mitral_Cell_Gap_Network_copy4_copy2_Genesis_single_cell_no_calcium/cellMechanisms/Kdr_ChannelML/ChannelML_v1.8.0_GENESIStab.xsl



// This is a GENESIS script file generated from a ChannelML v1.8.0 file
// The ChannelML file is mapped onto a tabchannel object


// Units of ChannelML file: Physiological Units, units of GENESIS file generated: SI Units

/*
    ChannelML file containing a single Channel description
*/

function make_Kdr_ChannelML

        /*
            Mitral cell K DR channel

        */
        

        str chanpath = "/library/Kdr_ChannelML"

        if ({exists {chanpath}})
            return
        end
        
        create tabchannel {chanpath}
            

        setfield {chanpath} \ 
            Ek              -0.090 \
            Ik              0  \
            Xpower          1
        
        setfield {chanpath} \
            Gbar 360 \
            Gk              0 

        
        // There is a Q10 factor which will alter the tau of the gates
                             

        float temp_adj_m = {pow 3 {(celsius - 24)/10}}

        float tab_divs = 400

        float v_min = -0.1

        float v_max = 0.1

        float v, dv, i
        

        // Creating table for gate m, using name X for it here

        float dv = ({v_max} - {v_min})/{tab_divs}

        
        call {chanpath} TABCREATE X {tab_divs} {v_min} {v_max}
                

        v = {v_min}

            

        for (i = 0; i <= ({tab_divs}); i = i + 1)
        
            // Looking at rate: alpha
                

            float alpha
                
            float A, B, k, V0
                             

            // ChannelML form of equation: alpha = A*exp(k*(v-d)), with params:
            // A = 1, k = 0.055, d = -50, in units: Physiological Units
            A = 1000
            k = 55
            B = 1/k
            V0 = -0.05
            alpha = A * {exp {(v - V0) / B}}
        
            // Looking at rate: beta
                

            float beta
                
            float A, B, k, V0
                             

            // ChannelML form of equation: beta = A*exp(k*(v-d)), with params:
            // A = 1, k = 0.0275, d = -50, in units: Physiological Units
            A = 1000
            k = 27.5
            B = 1/k
            V0 = -0.05
            beta = A * {exp {(v - V0) / B}}
        
            // Looking at rate: tau
                

            float tau
                     

            // Found a generic form of rate equation for tau, using expression: beta/(0.0035 *( 1 +alpha))
            // Will translate this for GENESIS compatibility...
                    
            // Equation (and all ChannelML file values) in Physiological Units but this script in SI Units
            

            v = v * 1000 // temporarily set v to units of equation...
            
            // Equation depends on alpha/beta, so converting them too...
            alpha = alpha * 0.001
            beta = beta * 0.001
            tau = beta/{0.0035 *{ 1 +alpha}}
            
            v = v * 0.001 // reset v
            
            alpha = alpha * 1000  // resetting alpha
            beta = beta * 1000  // resetting beta
                        
            // Set correct units of tau
            tau = tau * 0.001
            // Looking at rate: inf
                

            float inf
                
            float A, B, k, V0
                             

            // ChannelML form of equation: inf = A/(1 + exp(k*(v-d))), with params:
            // A = 1, k = -0.1, d = 21, in units: Physiological Units
            A = 1
            k = -100
            B = 1/k
            V0 = 0.021
            inf = A / ( {exp {(v - V0) / B}} + 1)
        

            // Evaluating the tau and inf expressions

                    
            tau = tau/temp_adj_m
    

            
            // Working out the "real" alpha and beta expressions from the tau and inf
            
            alpha = inf / tau   
            beta = (1- inf)/tau
            
            
            setfield {chanpath} X_A->table[{i}] {alpha}
            setfield {chanpath} X_B->table[{i}] {alpha + beta}

                

            v = v + dv

        end // end of for (i = 0; i <= ({tab_divs}); i = i + 1)

        

          


        setfield {chanpath} X_A->calc_mode 1 X_B->calc_mode 1


        


end

